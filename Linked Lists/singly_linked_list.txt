#Singly linked List

class Node:
    def __init__(self, value, next = None):
        self.value = value
        self.next = next

    def get_value(self):
        return self.value

    def get_next(self):
        return self.next

    def set_next(self, new_next):
        self.next = new_next

    def __str__(self):
        return str(self.value)
    
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def add_to_head(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.set_next(self.head)
            self.head = new_node

    def add_to_tail(self, value):
        new_node = Node(value)
        if self.tail is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.set_next(new_node)
            self.tail = new_node

    def remove_head(self):
        if self.head is None:
            return None
        else:
            value = self.head.get_value()
            self.head = self.head.get_next()
            return value

    def remove_tail(self):
        if self.head is None:
            return None
        else:
            current = self.head
            while current.get_next() != self.tail:
                current = current.get_next()
            value = self.tail.get_value()
            current.set_next(None)
            self.tail = current
            return value

    def contains(self, value):
        if self.head is None:
            return False
        else:
            current = self.head
            while current is not None:
                if current.get_value() == value:
                    return True
                current = current.get_next()
            return False

    def get_max(self):
        if self.head is None:
            return None
        else:
            current = self.head
            max = self.head.get_value()
            while current is not None:
                if current.get_value() > max:
                    max = current.get_value()
                current = current.get_next()
            return max

    def get_min(self):
        if self.head is None:
            return None
        else:
            current = self.head
            min = self.head.get_value()
            while current is not None:
                if current.get_value() < min:
                    min = current.get_value()
                current = current.get_next()
            return min

    def get_size(self):
        if self.head is None:
            return 0
        else:
            current = self.head
            count = 0
            while current is not None:
                count += 1
                current = current.get_next()
            return count

    def __str__(self):
        if self.head is None:
            return ''
        else:
            current = self.head
            string = ''
            while current is not None:
                string += str(current.get_value()) + ' '
                current = current.get_next()
            return string

    def __len__(self):
        return self.get_size()
    
    def __getitem__(self, index):
        if self.head is None:
            return None
        else:
            current = self.head
            count = 0
            while current is not None:
                if count == index:
                    return current.get_value()
                current = current.get_next()
                count += 1
            return None
    
    def __setitem__(self, index, value):
        if self.head is None:
            return None
        else:
            current = self.head
            count = 0
            while current is not None:
                if count == index:
                    current.set_value(value)
                    return
                current = current.get_next()
                count += 1
            return None


