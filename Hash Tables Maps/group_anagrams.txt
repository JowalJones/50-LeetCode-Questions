
"""
    Given an array of strings strs, group the anagrams together. You can return the answer in any order.

   An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once

    #? Time Complexity O(N*M*Log(M))---
    N --> Length of input array
    M --> Length of biggest string in array

    N--> Due to loop over input array
    M * Log(M)--> due to the fact that we sort each string when we pass over it in the loop.

    #? Space: O(N)-- use hashmap to store our data
    """



class Solution:

    def hashed_string(self, s):
        return "".join(sorted(s))

    def group_anagrams(self, strs:[str]) -> list[list[str]]:
        answers = []
        m = {}

        for s in strs:
            hashed_s = hashed_string(s)
            if (hashed_s not in m):
                m[hashed_s] = []
            m[hashed_s].append(hashed_s)

        for val in m.values():
            answers.append(val)

        return answers




#* * * * * * * * * * * *Simple Solution* * * * *


def group_anagrams(strs):
    if len(strs) <2:
        return [strs]
    
    d = {}

    for s in strs:
        s_hashed = "".join(sorted(s))
        if s_hashed in d.keys():
            d[s_hashed].append[s]
        
        else: 
            d[s_hashed] = [s]

    return d.values()




def group_anagrams(strs):
    if len(strs) <= 1:
        return strs
    
    m = {}
    for str in strs:
        hs = "".join(sorted(str))
        if hs in m:
            m[hs].append(str)
        else:
            m[hs] = [str]
    
    return m.values()


s = Solution()

strs = ["cat", "dog", "god", "act", "tac", "man"]

result = s.group_anagrams(strs)

print (result)