#Remove Nth Node From End of List
"""
Given a linked list, remove the n-th node from the end of list and return its head.

Example:

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:

Given n will always be valid.

Follow up:

Could you do this in one pass?
"""

#*Time Complexity: O(2n) = O(n)
#*Space Complexity: O(1)


# Definition for singly-linked list.
 class ListNode:
     def __init__(self, x):
         self.val = x
         self.next = None


#One Solution
class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        #*Create a dummy node to point to the head
        dummy = ListNode(0)
        dummy.next = head
        #*Create a fast pointer and a slow pointer
        fast = dummy
        slow = dummy
        #*Move the fast pointer n nodes ahead
        for i in range(n):
            fast = fast.next
        #*Move the fast pointer to the end of the list
        while fast.next:
            fast = fast.next
            slow = slow.next
        #*Remove the node
        slow.next = slow.next.next
        return dummy.next


#Another Solution

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        if head.next == None:
            return None
        else:
            node = head
            length = 0
            while node != None:
                length += 1
                node = node.next
            if length == n:
                return head.next
            else:
                node = head
                for i in range(length - n - 1):
                    node = node.next
                node.next = node.next.next
                return head


def remove_nth_node_from_end(self, n):
    dummy = ListNode(0)
    dummy.next= self.head

    slow = dummy.next
    fast = dummy.next

    for i in range (n):
        fast = fast.next

    while fast.next:
        slow=slow.next
        fast = fast.next

    slow.next = slow.next.next
    return self.head