#Singly linked List

class Node:
    def __init__(self, value, next=None):
        self.value = value
        self.next = next

    def get_value(self):
        return self.value
    
    def get_next(self):
        return self.next
    
    def __str__(self):
        return str(self.value)

    def set_value(self, value):
        self.value = value

    def set_next(self, new_next):
        self.next= new_next

class LinkedList:
    def __init__(self):
        self.head = None:
        self.tail = None

    def get_size(self):
    if not self.head:
        print ("List empty")
        return
    count = 1
    current = self.head
    while current.next:
        current = current.next
        count +=1 
    return count



    def add_node(value_to_insert, pos=None):
        size = self.get_size()
        if (pos) and ((pos<0) or (pos>size)):
            print ("invalid position!")
            return
        new_node = Node(value_to_insert)
        if pos:
            if (pos == 0):
                new_next = self.head
                self.head = new_node
                self.head.next = new_next
                return
            else:
                count= 0
                current = self.head
                for _ in range (pos -1):
                    current = current.next
                    count +=1
                new_next = current.next
                current.next = new_node
                new_node.next = new_next
                return
        else:
            if not self.head:
                    self.head=new_node
                    return
            while current.next:
                current = current.next
            current.next = new_node
            return

































class Node:
    def __init__(self, value, next = None):
        self.value = value
        self.next = next

    def get_value(self):
        return self.value

    def get_next(self):
        return self.next

    def set_next(self, new_next):
        self.next = new_next

    def __str__(self):
        return str(self.value)
    
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def add_to_head(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.set_next(self.head)
            self.head = new_node

    def add_to_tail(self, value):
        new_node = Node(value)
        if self.tail is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.set_next(new_node)
            self.tail = new_node

    def remove_head(self):
        if self.head is None:
            return None
        else:
            value = self.head.get_value()
            self.head = self.head.get_next()
            return value

    def remove_tail(self):
        if self.head is None:
            return None
        else:
            current = self.head
            while current.get_next() != self.tail:
                current = current.get_next()
            value = self.tail.get_value()
            current.set_next(None)
            self.tail = current
            return value

    def contains(self, value):
        if self.head is None:
            return False
        else:
            current = self.head
            while current is not None:
                if current.get_value() == value:
                    return True
                current = current.get_next()
            return False

    def get_max(self):
        if self.head is None:
            return None
        else:
            current = self.head
            max = self.head.get_value()
            while current is not None:
                if current.get_value() > max:
                    max = current.get_value()
                current = current.get_next()
            return max

    def get_min(self):
        if self.head is None:
            return None
        else:
            current = self.head
            min = self.head.get_value()
            while current is not None:
                if current.get_value() < min:
                    min = current.get_value()
                current = current.get_next()
            return min

    def get_size(self):
        if self.head is None:
            return 0
        else:
            current = self.head
            count = 0
            while current is not None:
                count += 1
                current = current.get_next()
            return count

    def __str__(self):
        if self.head is None:
            return ''
        else:
            current = self.head
            string = ''
            while current is not None:
                string += str(current.get_value()) + ' '
                current = current.get_next()
            return string

    def __len__(self):
        return self.get_size()
    
    def __getitem__(self, index):
        if self.head is None:
            return None
        else:
            current = self.head
            count = 0
            while current is not None:
                if count == index:
                    return current.get_value()
                current = current.get_next()
                count += 1
            return None
    
    def __setitem__(self, index, value):
        if self.head is None:
            return None
        else:
            current = self.head
            count = 0
            while current is not None:
                if count == index:
                    current.set_value(value)
                    return
                current = current.get_next()
                count += 1
            return None


#JavaScript

class Node {
    constructor(value, next = null) {
        this.value = value;
        this.next = next;
    }
}

class LinkedList {
    constructor() {
        this.head = null;
        this.tail = null;
    }

    add_to_head(value) {
        let new_node = new Node(value);
        if (this.head === null) {
            this.head = new_node;
            this.tail = new_node;
        } else {
            new_node.next = this.head;
            this.head = new_node;
        }
    }

    add_to_tail(value) {
        let new_node = new Node(value);
        if (this.tail === null) {
            this.head = new_node;
            this.tail = new_node;
        } else {
            this.tail.next = new_node;
            this.tail = new_node;
        }
    }

    remove_head() {
        if (this.head === null) {
            return null;
        } else {
            let value = this.head.value;
            this.head = this.head.next;
            return value;
        }
    }

    remove_tail() {
        if (this.head === null) {
            return null;
        } else {
            let current = this.head;
            while (current.next !== this.tail) {
                current = current.next;
            }
            let value = this.tail.value;
            current.next = null;
            this.tail = current;
            return value;
        }
    }

    contains(value) {
        if (this.head === null) {
            return false;
        } else {
            let current = this.head;
            while (current !== null) {
                if (current.value === value) {
                    return true;
                }
                current = current.next;
            }
            return false;
        }
    }

    get_max() {
        if (this.head === null) {
            return null;
        } else {
            let current = this.head;
            let max = this.head.value;
            while (current !== null) {
                if (current.value > max) {
                    max = current.value;
                }
                current = current.next;
            }
            return max;
        }
    }

    get_min() {
        if (this.head === null) {
            return null;
        } else {
            let current = this.head;
            let min = this.head.value;
            while (current !== null) {
                if (current.value < min) {
                    min = current.value;
                }
                current = current.next;
            }
            return min;
        }
    }

    get_size() {
        if (this.head === null) {
            return 0;
        } else {
            let current = this.head;
            let count = 0;
            while (current !== null) {
                count += 1;
                current = current.next;
            }
            return count;
        }
    }

    print() {
        if (this.head === null) {
            return '';
        } else {
            let current = this.head;
            let string = '';
            while (current !== null) {
                string += current.value + ' ';
                current = current.next;
            }
            return string;
        }
    }

    get(index) {
        if (this.head === null) {
            return null;
        } else {
            let current = this.head;
            let count = 0;
            while (current !== null) {
                if (count === index) {
                    return current.value;
                }
                current = current.next;
                count += 1;
            }
            return null;
        }
    }

    set(index, value) {
        if (this.head === null) {
            return null;
        } else {
            let current = this.head;
            let count = 0;
            while (current !== null) {
                if (count === index) {
                    current.value = value;
                    return;
                }
                current = current.next;
                count += 1;
            }
            return null;
        }
    }

    insert(index, value) {
        if (this.head === null) {
            return null;
        } else {
            let current = this.head;
            let count = 0;
            while (current !== null) {
                if (count === index - 1) {
                    let new_node = new Node(value);
                    new_node.next = current.next;
                    current.next = new_node;
                    return;
                }
                current = current.next;
                count += 1;
            }
            return null;
        }
    }

    remove(index) {
        if (this.head === null) {
            return null;
        } else {
            let current = this.head;
            let count = 0;
            while (current !== null) {
                if (count === index - 1) {
                    current.next = current.next.next;
                    return;
                }
                current = current.next;
                count += 1;
            }
            return null;
        }
    }
}



#Python 

class Node:
    def __init__(self, data):
        self.data=data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
    
    def insert_node(self, value_to_insert, pos=None):
        target = Node(value_to_insert)
        if not pos:
            if (self.head == None):
                self.head=target
                return
            else:
                temp=self.head
                while (temp.next):
                    temp = temp.next
                temp.next = target

        elif (pos==0):
            target.next = self.head
            self.head= target
            return
        else:
            def getPrev(pos):
                count = 1
                temp = self.head
                while (count < pos):
                    temp = temp.next
                    count+=1
                return temp

            prev_node = getPrev(pos)
            new_next=prev_node.
            
            prev_node.next =target
            target.next = new_next
            return

    def delete_node(self, value_to_delete):
        if (self.head.data==value_to_delete):
            temp=self.head.next
            self.head.next=None
            self.head=temp
            return
        else:
            temp = self.head
            while (temp.next.data != value_to_delete):
                temp=temp.next
            target_node = temp.next
            temp.next=target_node.next
            target_node.next = None
            return
        return ("value to delete not found")

    def __str__(self):
        current = self.head
        my_str=""
        while current:
            if not current.next:
                my_str+=str(current.data)
            else:
                my_str+=str(current.data)+" => "
                current = current.next

        return my_str


    def get_max(self):
        current = self.head
        max = self.head.data
        while current:
            if current.data > max:
                max = current.data
            current = current.next
        return max
    
    def get_min(self):
        current = self.head
        min = self.head.data
        while current:
            if current.data < min:
                min = current.data
            current = current.next
        return min

    def get_size(self):
        current = self.head
        count = 0
        while current:
            count += 1
            current = current.next
        return count
    
    def get(self, index):
        current = self.head
        count = 0
        while current:
            if count == index:
                return current.data
            current = current.next
            count += 1
        return None
    

#JavaScript

class Node {
    constructor(data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList{
    constructor() {
        this.head = null;
    }

    insert_node(value_to_insert, pos = null) {
        let target = new Node(value_to_insert);
        if (!pos) {
            if (!this.head) {
                this.head = target;
                return;
            } else {
                let temp = this.head;
                while (temp.next) {
                    temp = temp.next;
                }
                temp.next = target;
            }
        } else if (pos === 0) {
            target.next = this.head;
            this.head = target;
            return;
        } else {
            function getPrev(pos) {
                let count = 1;
                let temp = this.head;
                while (count < pos) {
                    temp = temp.next;
                    count += 1;
                }
                return;
            }

            let prev_node = getPrev(pos);
            let new_next = prev_node.next;
            prev_node.next = target;
            target.next = new_next;
            return;
        }
    }

    delete_node(value_to_delete) {
        if (this.head.data === value_to_delete) {
            let temp = this.head.next;
            this.head.next = null;
            this.head = temp;
            return;
        } else {
            let temp = this.head;
            while (temp.next.data !== value_to_delete) {
                temp = temp.next;
            }
            let target_node = temp.next;
            temp.next = target_node.next;
            target_node.next = null;
            return;
        }
        return "value to delete not found";
    }

    toString() {
        let current = this.head;
        let my_str = "";
        while (current) {
            if (!current.next) {
                my_str += current.data;
            } else {
                my_str += current.data + " => ";
                current = current.next;
            }
        }
        return my_str;
    }

    get_max() {
        let current = this.head;
        let max = this.head.data;
        while (current) {
            if (current.data > max) {
                max = current.data;
            }
            current = current.next;
        }
        return max;
    }

    get_min() {
        let current = this.head;
        let min = this.head.data;
        while (current) {
            if (current.data < min) {
                min = current.data;
            }
            current = current.next;
        }
        return min;
}

    get_size() {
        let current = this.head;
        let count = 0;
        while (current) {
            count += 1;
            current = current.next;
        }
        return count;
    }

    get(index) {
        let current = this.head;
        let count = 0;
        while (current) {
            if (count === index) {
                return current.data;
            }
            current = current.next;
            count += 1;
        }
        return null;
    }
}