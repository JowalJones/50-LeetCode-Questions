"""
    LeetCode #743
    https://leetcode.com/problems/network-delay-time/
    
    There are N network nodes, labelled 1 to N. Given times, a list of travel times as directed edges times[i] = (u, v, w), 
    where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target. 
    Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal?
    If it is impossible, return -1.
    
    Example 1:
    Input: times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
    Output: 2
    
    """
from collections import defaultdict
import heapq

def network_delay(times, n, k):
    graph = defaultdict[list]
    for u, v, w in times:
        graph[u].append((v, w))
    
    #Create priority_queue
    min_heap=[(0,k)]

    #create a time_dict
    time_dict={node: float('inf) for node in range(1, n+1)}
    time_dict[k]=0

    while min_heap:
        current_time, current_node = heapq.heappop(min_heap)

        if current_time <= time_dict[current_node]:
            for neighbor, time in graph[current_node]:
                total_time_to_neighbor = time_dict[current_node]+ time

                if total_time_to_neighbor < time_dict[neighbor]:
                    time_dict[neighbor] = total_time_to_neighbor
                    heapq.heappush(min_heap, (total_time_to_neighbor, neighbor))
    
    max_dist = max(time_dict.values())
    return max_dist if max_dist < float('inf') else -1